type TribeChangeRecord {
  player: Player @goField(forceResolver: true)
  oldTribe: Tribe @goField(forceResolver: true)
  newTribe: Tribe @goField(forceResolver: true)
  createdAt: Time!
}

type TribeChanges {
  total: Int!
  items: [TribeChangeRecord!]
}

input TribeChangeFilterOr {
  oldTribeID: [Int!]
  newTribeID: [Int!]
}

input TribeChangeFilter {
  playerID: [Int!]
  playerIDNEQ: [Int!]

  oldTribeID: [Int!]
  oldTribeIDNEQ: [Int!]

  newTribeID: [Int!]
  newTribeIDNEQ: [Int!]

  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  or: TribeChangeFilterOr

  offset: Int
    @deprecated(
      reason: "Use a new variable added to the query tribeChanges - `offset`."
    )
  limit: Int
    @deprecated(
      reason: "Use a new variable added to the query tribeChanges - `limit`."
    )
  sort: String
    @deprecated(
      reason: "Use a new variable added to the query tribeChanges - `sort`."
    )
}

extend type Query {
  tribeChanges(
    server: String!
    filter: TribeChangeFilter
    limit: Int
    offset: Int
    sort: [String!]
  ): TribeChanges!
}
