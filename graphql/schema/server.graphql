enum ServerStatus {
  OPEN
  CLOSED
}

type Server {
  key: String!
  status: ServerStatus!
  numberOfPlayers: Int!
  numberOfTribes: Int!
  numberOfVillages: Int!

  version: Version @goField(forceResolver: true)

  config: ServerConfig!
  unitConfig: UnitConfig!
  buildingConfig: BuildingConfig!

  dataUpdatedAt: Time!
  historyUpdatedAt: Time!
  statsUpdatedAt: Time!
}

type ServerList {
  items: [Server!]
  total: Int!
}

input ServerFilter {
  key: [String!]
  keyNEQ: [String!]
  keyMATCH: String
  keyIEQ: String

  status: [ServerStatus!]
  statusNEQ: [ServerStatus!]

  versionCode: [VersionCode!]
  versionCodeNEQ: [VersionCode!]

  offset: Int
    @deprecated(
      reason: "Use a new variable added to the query players - `offset`."
    )
  limit: Int
    @deprecated(
      reason: "Use a new variable added to the query players - `limit`."
    )
  sort: String
    @deprecated(
      reason: "Use a new variable added to the query players - `sort`."
    )
}

extend type Query {
  servers(
    filter: ServerFilter
    limit: Int
    offset: Int
    sort: [String!]
  ): ServerList!
  server(key: String!): Server
}
